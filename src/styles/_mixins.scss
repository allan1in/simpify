// SCSS mixins

// https://sass-lang.com/documentation/breaking-changes/mixed-decls/
@mixin clickAnimation {
  & {
    &:hover {
      transform: scale(1.04);
    }

    &:active {
      transform: scale(1);
      opacity: 0.8;
    }
  }
}

@mixin clearfix {
  & {
    &::before,
    &::after {
      content: '';
      clear: both;
      display: table;
    }
  }
}

@mixin transition {
  & {
    transition: all $duration-default ease;
  }
}

@mixin transitionSlow {
  & {
    transition: all $duration-slow ease;
  }
}

@mixin transitionFast {
  & {
    transition: all $duration-fast ease;
  }
}

@mixin oneLineEllipsis {
  & {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
    word-break: break-all;
  }
}

@mixin twoLineEllipsis {
  & {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    word-break: break-all;
  }
}

@mixin titleStyles {
  & {
    font-size: $font-size-title-primary;
    color: $color-font-primary;
    font-family: $font-family-title;
    font-weight: 700;
  }
}

// MEDIA QUERY MANAGER

/*
0 - 600px:      Phone
600 - 768px:    Tablet portrait
768 - 1024px:   Tablet landscape
1024 - 1440px:  Default
1440 + :        Big desktop
*/

// reference: https://gs.statcounter.com/screen-resolution-stats

@mixin respond($breackpoint) {
  @if $breackpoint == phone {
    & {
      @media only screen and (max-width: 60rem) {
        // <= 600px
        @content;
      }
    }
  }

  @if $breackpoint == tab-port {
    & {
      @media only screen and (max-width: 76.8rem) {
        // <= 768px
        @content;
      }
    }
  }

  @if $breackpoint == tab-land {
    & {
      @media only screen and (max-width: 102.4rem) {
        // <= 1024px
        @content;
      }
    }
  }

  @if $breackpoint == desktop {
    & {
      @media only screen and (min-width: 144rem) {
        // >= 1440px
        @content;
      }
    }
  }
}

@mixin respondContainer($breackpoint) {
  @if $breackpoint == collasped {
    & {
      @container container-box (max-width: 7.2rem) {
        // <= 72px
        @content;
      }
    }
  }

  @if $breackpoint == phone {
    & {
      @container container-box (max-width: 60rem) {
        // <= 600px
        @content;
      }
    }
  }

  @if $breackpoint == phone {
    & {
      @container container-box (max-width: 60rem) {
        // <= 600px
        @content;
      }
    }
  }

  @if $breackpoint == tab-port {
    & {
      @container container-box (max-width: 76.8rem) {
        // <= 768px
        @content;
      }
    }
  }

  @if $breackpoint == tab-land {
    & {
      @container container-box (max-width: 102.4rem) {
        // <= 1024px
        @content;
      }
    }
  }

  @if $breackpoint == desktop {
    & {
      @container container-box (min-width: 144rem) {
        // >= 1440px
        @content;
      }
    }
  }
}

// https://sass-lang.com/documentation/at-rules/mixin/#keyword-arguments
@mixin gridCards() {
  & {
    display: grid;
    grid-template-columns: repeat(6, minmax(0, 1fr));
  }

  @include respondContainer(desktop) {
    grid-template-columns: repeat(8, minmax(0, 1fr));
  }

  @include respondContainer(tab-land) {
    & {
      grid-template-columns: repeat(4, minmax(0, 1fr));
    }
  }

  @include respondContainer(phone) {
    & {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
}

@mixin gridCardsLess() {
  & {
    display: grid;
    grid-template-columns: repeat(8, minmax(0, 1fr));

    @include respondContainer(tab-land) {
      grid-template-columns: repeat(4, minmax(0, 1fr));
    }

    @include respondContainer(phone) {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
}

@mixin gridCardsExtraLess() {
  & {
    display: grid;
    grid-template-columns: repeat(4, minmax(0, 1fr));

    @include respondContainer(tab-land) {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }

    @include respondContainer(phone) {
      grid-template-columns: repeat(1, minmax(0, 1fr));
    }
  }
}

@mixin gridCardsLibrary() {
  & {
    display: grid;
    grid-template-columns: repeat(3, minmax(0, 1fr));

    @include respondContainer(tab-land) {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }

    @include respondContainer(phone) {
      grid-template-columns: repeat(1, minmax(0, 1fr));
    }
  }
}
